import io.github.opencubicchunks.gradle.MergedMappingsDependency
import org.gradle.internal.os.OperatingSystem

buildscript {
    repositories {
        maven {
            name = 'Fabric'
            url = 'https://maven.fabricmc.net/'
        }
    }
    dependencies {
        classpath 'net.fabricmc:fabric-loom:0.5-SNAPSHOT'
    }
}
plugins {
    id 'maven-publish'
    id 'checkstyle'
}

apply plugin: "fabric-loom"
apply plugin: "io.github.opencubicchunks.gradle.mcGitVersion"
apply plugin: "io.github.opencubicchunks.gradle.mixingen"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

mcGitVersion {
    snapshot = true
    mcVersion = "${project.minecraft_version}"
    setCommitVersion '570c0cbf0cdc15b8348a862a519d3399a943af9', '0.0'
}

mixinGen {
    filePattern = "cubicchunks.mixins.%s.json"
    defaultRefmap = "CubicChunks-refmap.json"
    defaultPackagePrefix = "io.github.opencubicchunks.cubicchunks.mixin"
    defaultCompatibilityLevel = "JAVA_8"
    defaultMinVersion = "0.8"

    config("core") {
        it.required = true
        it.conformVisibility = true
        it.injectorsDefaultRequire = 1
    }

    config("access") {
        it.required = true
        it.conformVisibility = true
    }

    config("asm") {
        it.required = true
        it.configurationPlugin = 'io.github.opencubicchunks.cubicchunks.mixin.ASMConfigPlugin'
    }

    config("optifine") {
        it.required = true
        it.configurationPlugin = 'io.github.opencubicchunks.cubicchunks.mixin.OptiFineMixinConfig'
        it.injectorsDefaultRequire = 1
    }
}

group = "io.github.opencubicchunks" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "CubicChunks"

configurations {
    debugCompile
    debugRuntime {
        extendsFrom(debugCompile)
    }
}

sourceSets {
    debug {
        compileClasspath += configurations.debugCompile
        compileClasspath += configurations.compileClasspath
        compileClasspath += sourceSets.main.output
        runtimeClasspath += configurations.debugRuntime
        runtimeClasspath += configurations.runtimeClasspath
        runtimeClasspath += sourceSets.main.output
    }
}

minecraft {
    accessWidener "src/main/resources/cubicchunks.accesswidener"
    // intermediaryUrl = { "http://localhost:9000/intermediary-20w49a-v2.jar" }
}

/*
minecraft {

    def args = [
            "-XX:+UseG1GC",
            "-Xmx2G",
            "-XX:+UnlockExperimentalVMOptions",
            "-XX:G1NewSizePercent=20",
            "-XX:G1ReservePercent=20",
            "-XX:MaxGCPauseMillis=50",
            "-XX:G1HeapRegionSize=32M",
            "-Dmixin.debug.verbose=true",
            "-Dmixin.debug.export=true",
            "-Dcubicchunks.debug=true",
            "-XX:-OmitStackTraceInFastThrow",
            "-Dmixin.checks.interfaces=true"
    ]
}*/

repositories{
    jcenter()
    mavenCentral()
    mavenLocal()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
    maven {
        url 'https://repo.spongepowered.org/maven/'
    }
    maven {
        name = "JitPack"
        url = "https://jitpack.io"
    }
}

// for vulkan
project.ext.lwjglVersion = "3.2.2"

switch (OperatingSystem.current()) {
    case OperatingSystem.LINUX:
        def osArch = System.getProperty("os.arch")
        project.ext.lwjglNatives = osArch.startsWith("arm") || osArch.startsWith("aarch64")
                ? "natives-linux-${osArch.contains("64") || osArch.startsWith("armv8") ? "arm64" : "arm32"}"
                : "natives-linux"
        break
    case OperatingSystem.WINDOWS:
        project.ext.lwjglNatives = System.getProperty("os.arch").contains("64") ? "natives-windows" : "natives-windows-x86"
        break
    case OperatingSystem.MAC_OS:
        project.ext.lwjglNatives = "natives-macos"
        project.ext.lwjglVersion = "3.2.1"
        break
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    def dummyConfig = configurations.create("dummyResolvingConfiguration")
    mappings new MergedMappingsDependency(project, dummyConfig,
            minecraft.officialMojangMappings(),
            dependencies.add("dummyResolvingConfiguration", dependencies.create("net.fabricmc:yarn:${project.yarn_version}:v2")))
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Add each module as a dependency
    ["fabric-api-base", "fabric-command-api-v1", "fabric-networking-v0", "fabric-lifecycle-events-v1"].forEach {
        modImplementation(fabricApi.module(it, project.fabric_version))
    }

    // modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modRuntime ("com.github.SuperCoder7979:databreaker:0.2.6") {
        exclude module: "fabric-loader"
    }

    compileOnly('com.google.code.findbugs:jsr305:3.0.1')

    testCompile('junit:junit:4.11')
    testCompile('org.hamcrest:hamcrest-junit:2.0.0.0')

    debugCompile "org.lwjgl:lwjgl-vulkan:$lwjglVersion"
    debugRuntime "org.lwjgl:lwjgl::$lwjglNatives"

    include implementation('io.github.opencubicchunks:regionlib:0.63.0-SNAPSHOT')
    include implementation('org.spongepowered:noise:2.0.0-SNAPSHOT')

    modImplementation ("me.sargunvohra.mcmods:autoconfig1u:${project.auto_config_version}"){
        exclude module: 'fabric-api'
    }
    include ("me.sargunvohra.mcmods:autoconfig1u:${project.auto_config_version}"){
        exclude module: 'fabric-api'
    }

    modImplementation ("io.github.prospector:modmenu:${project.mod_menu_version}"){
        exclude module: 'fabric-api'
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}


jar {
    from "LICENSE"
    manifest {
        attributes([
                "Specification-Title": "${modid}",
                "Specification-Vendor": "cubicchunks",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"cubicchunks",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConnector": "io.github.opencubicchunks.cubicchunks.mixin.CCMixinConnector",
                "accessWidener": "cubicchunks.accesswidener"
        ])
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}


