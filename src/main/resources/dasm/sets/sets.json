{
    "general": {
        "typeRedirects": {
            "net.minecraft.world.level.ChunkPos": "io.github.opencubicchunks.cc_core.api.CubePos",
            "net.minecraft.world.level.chunk.LevelChunk": "io.github.opencubicchunks.cubicchunks.world.level.chunk.LevelCube"
        },
        "fieldRedirects": {},
        "methodRedirects": {
            "net.minecraft.world.level.chunk.LevelChunk | net.minecraft.world.level.ChunkPos getPos()": {
                "newName": "getCubePos",
                "mappingsOwner": "net.minecraft.world.level.chunk.ChunkAccess"
            },
            "net.minecraft.world.level.chunk.ChunkAccess | net.minecraft.world.level.ChunkPos getPos()": "getCubePos",
            "net.minecraft.world.level.ChunkPos | long toLong()": "asLong",
            "net.minecraft.world.level.ChunkPos | long asLong(int, int)": "asLong",
            "net.minecraft.world.level.ChunkPos | long asLong(net.minecraft.core.BlockPos)": "asLong"
        }
    },
    "chunkHolderSet": {
        "typeRedirects": {
            "net.minecraft.server.level.ChunkHolder$1": "io.github.opencubicchunks.cubicchunks.server.level.CubeHolder$CubeLoadingError"
        },
        "fieldRedirects": {
            "net.minecraft.server.level.ChunkMap | int MAX_CHUNK_DISTANCE": "MAX_CUBE_DISTANCE",
            "net.minecraft.server.level.ChunkHolder | net.minecraft.world.level.ChunkPos pos": "cubePos"
        },
        "methodRedirects": {
            "net.minecraft.server.level.ChunkHolder | net.minecraft.world.level.chunk.ChunkStatus getStatus(int)": "getCubeStatus",
            "net.minecraft.server.level.ChunkMap | java.util.concurrent.CompletableFuture prepareAccessibleChunk(net.minecraft.server.level.ChunkHolder)": "prepareAccessibleCube",
            "net.minecraft.server.level.ChunkMap | java.util.concurrent.CompletableFuture prepareTickingChunk(net.minecraft.server.level.ChunkHolder)": "prepareTickingCube",
            "net.minecraft.server.level.ChunkMap | java.util.concurrent.CompletableFuture prepareEntityTickingChunk(net.minecraft.world.level.ChunkPos)": "prepareEntityTickingCube",
            "net.minecraft.server.level.ChunkHolder$LevelChangeListener | void onLevelChange(net.minecraft.world.level.ChunkPos, java.util.function.IntSupplier, int, java.util.function.IntConsumer)": "onCubeLevelChange"
        }
    },
    "chunkMapSet": {
        "typeRedirects": {
            "net.minecraft.server.level.ChunkTaskPriorityQueueSorter": "io.github.opencubicchunks.cubicchunks.server.level.CubeTaskPriorityQueueSorter"
        },
        "fieldRedirects": {
            "net.minecraft.server.level.ChunkMap | it.unimi.dsi.fastutil.longs.LongSet toDrop": "cubesToDrop",
            "net.minecraft.server.level.ChunkMap | it.unimi.dsi.fastutil.longs.Long2ObjectLinkedOpenHashMap pendingUnloads": "pendingCubeUnloads",
            "net.minecraft.server.level.ChunkMap | net.minecraft.server.level.ChunkTaskPriorityQueueSorter queueSorter": "cubeQueueSorter",
            "net.minecraft.server.level.ChunkMap | it.unimi.dsi.fastutil.longs.Long2ObjectLinkedOpenHashMap updatingChunkMap": "updatingCubeMap",
            "net.minecraft.server.level.ChunkMap | int MAX_CHUNK_DISTANCE": "MAX_CUBE_DISTANCE",
            "net.minecraft.server.level.ChunkMap | it.unimi.dsi.fastutil.longs.Long2ByteMap chunkTypeCache": "cubeTypeCache"
        },
        "methodRedirects": {
            "net.minecraft.server.level.ChunkMap | net.minecraft.nbt.CompoundTag readChunk(net.minecraft.world.level.ChunkPos)": "readCubeNBT",
            "net.minecraft.server.level.ChunkMap | void markPositionReplaceable(net.minecraft.world.level.ChunkPos)": "markCubePositionReplaceable",
            "net.minecraft.server.level.ChunkMap | byte markPosition(net.minecraft.world.level.ChunkPos, net.minecraft.world.level.chunk.ChunkStatus$ChunkType)": "markCubePosition"
        }
    },
    "naturalSpawnerSet": {
        "typeRedirects": {
            "net.minecraft.world.level.NaturalSpawner$ChunkGetter": "io.github.opencubicchunks.cubicchunks.world.CubicNaturalSpawner$CubeGetter"
        },
        "fieldRedirects": {},
        "methodRedirects": {
            "net.minecraft.world.level.NaturalSpawner | void spawnCategoryForChunk(net.minecraft.world.entity.MobCategory, net.minecraft.server.level.ServerLevel, net.minecraft.world.level.chunk.LevelChunk, net.minecraft.world.level.NaturalSpawner$SpawnPredicate, net.minecraft.world.level.NaturalSpawner$AfterSpawnCallback)": "spawnCategoryForCube",
            "net.minecraft.world.level.NaturalSpawner | net.minecraft.core.BlockPos getRandomPosWithin(net.minecraft.world.level.Level, net.minecraft.world.level.chunk.LevelChunk)": "getRandomPosWithinCube",
            "net.minecraft.world.level.NaturalSpawner$SpawnState | boolean canSpawnForCategory(net.minecraft.world.entity.MobCategory, net.minecraft.world.level.ChunkPos)": "canSpawnForCategory",
            "net.minecraft.world.level.LocalMobCapCalculator | void addMob(net.minecraft.world.level.ChunkPos, net.minecraft.world.entity.MobCategory)": "addMob"
        }
    },
    "chunkMap$DistanceManagerSet": {
        "typeRedirects": {},
        "fieldRedirects": {},
        "methodRedirects": {
            "net.minecraft.server.level.ChunkMap | net.minecraft.server.level.ChunkHolder updateChunkScheduling(long, int, net.minecraft.server.level.ChunkHolder, int)": "updateCubeScheduling"
        }
    }
}